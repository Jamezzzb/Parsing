{"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"symbol","externalID":"s:7Parsing6ParserV","title":"Parser","symbolKind":"struct","modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Parser","kind":"identifier"}],"roleHeading":"Structure","navigatorTitle":[{"text":"Parser","kind":"identifier"}]},"abstract":[{"text":"A generic type for building parsers of (","type":"text"},{"code":"String","type":"codeVoice"},{"text":") -> ","type":"text"},{"type":"codeVoice","code":"Output"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Parser","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Output","kind":"genericParameter"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Parsing\/s43ExpressibleByExtendedGraphemeClusterLiteralP","doc:\/\/Parsing\/s26ExpressibleByStringLiteralP","doc:\/\/Parsing\/s33ExpressibleByUnicodeScalarLiteralP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"variants":[{"paths":["\/documentation\/parsing\/parser"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Parsing\/documentation\/Parsing\/Parser"},"topicSections":[{"identifiers":["doc:\/\/Parsing\/documentation\/Parsing\/Parser\/init(run:)"],"title":"Initializers"},{"identifiers":["doc:\/\/Parsing\/documentation\/Parsing\/Parser\/run"],"title":"Instance Properties"},{"identifiers":["doc:\/\/Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/map(_:)","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/run(_:)","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/zeroOrMore(separatedBy:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Parsing\/documentation\/Parsing\/Parser\/char","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/never","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/oneOrMoreSpaces","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/zeroOrMoreSpaces"],"title":"Type Properties"},{"identifiers":["doc:\/\/Parsing\/documentation\/Parsing\/Parser\/always(_:)","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/char(_:)","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/matchingAllCharacters(notIn:)","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/oneOf(_:)","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/prefix(_:)","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/prefix(while:)"],"title":"Type Methods"},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/Parsing\/documentation\/Parsing\/Parser\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/ExpressibleByStringLiteral-Implementations","doc:\/\/Parsing\/documentation\/Parsing\/Parser\/ExpressibleByUnicodeScalarLiteral-Implementations"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/Parsing\/documentation\/Parsing"]]},"sections":[],"references":{"doc://Parsing/documentation/Parsing/Parser/never":{"type":"topic","abstract":[{"text":"A parser that always fails, useful when combined with ","type":"text"},{"type":"codeVoice","code":"flatMap(_:)"},{"text":".","type":"text"}],"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/never","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"never","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parser","preciseIdentifier":"s:7Parsing6ParserV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"never","role":"symbol","url":"\/documentation\/parsing\/parser\/never"},"doc://Parsing/documentation/Parsing/Parser/flatMap(_:)":{"type":"topic","url":"\/documentation\/parsing\/parser\/flatmap(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"flatMap"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing6ParserV","kind":"typeIdentifier","text":"Parser"},{"kind":"text","text":"<"},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"Parser","preciseIdentifier":"s:7Parsing6ParserV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"B","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"flatMap(_:)","role":"symbol","abstract":[],"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)"},"doc://Parsing/documentation/Parsing":{"kind":"symbol","abstract":[],"url":"\/documentation\/parsing","title":"Parsing","type":"topic","role":"collection","identifier":"doc:\/\/Parsing\/documentation\/Parsing"},"doc://Parsing/documentation/Parsing/Parser/ExpressibleByExtendedGraphemeClusterLiteral-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/parsing\/parser\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations"},"doc://Parsing/documentation/Parsing/Parser":{"abstract":[{"type":"text","text":"A generic type for building parsers of ("},{"type":"codeVoice","code":"String"},{"text":") -> ","type":"text"},{"type":"codeVoice","code":"Output"}],"type":"topic","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser","title":"Parser","url":"\/documentation\/parsing\/parser","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"kind":"symbol","role":"symbol"},"doc://Parsing/documentation/Parsing/Parser/matchingAllCharacters(notIn:)":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"matchingAllCharacters"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"notIn"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sh","text":"Set","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:SJ","text":"Character"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing6ParserV","text":"Parser","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"title":"matchingAllCharacters(notIn:)","type":"topic","role":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" that prefixes while encountered characters not contained in given set.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/parser\/matchingallcharacters(notin:)","conformance":{"constraints":[{"type":"codeVoice","code":"Output"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/matchingAllCharacters(notIn:)"},"doc://Parsing/documentation/Parsing/Parser/init(run:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"run"},{"text":": (","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Substring","preciseIdentifier":"s:Ss"},{"kind":"text","text":") -> "},{"text":"Output","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"title":"init(run:)","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Initializes a "},{"code":"Parser","type":"codeVoice"},{"text":" with a mutating function on ","type":"text"},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}],"kind":"symbol","url":"\/documentation\/parsing\/parser\/init(run:)","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/init(run:)"},"doc://Parsing/documentation/Parsing/Parser/run":{"type":"topic","url":"\/documentation\/parsing\/parser\/run","kind":"symbol","title":"run","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Ss","text":"Substring","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"text":"Called inside of ","type":"text"},{"type":"codeVoice","code":"run(_:)"},{"type":"text","text":"."}],"role":"symbol","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/run"},"doc://Parsing/documentation/Parsing/Parser/zeroOrMoreSpaces":{"title":"zeroOrMoreSpaces","url":"\/documentation\/parsing\/parser\/zeroormorespaces","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/zeroOrMoreSpaces","abstract":[],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"kind":"identifier","text":"zeroOrMoreSpaces"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserV","text":"Parser"},{"text":"<()>","kind":"text"}]},"doc://Parsing/s43ExpressibleByExtendedGraphemeClusterLiteralP":{"type":"unresolvable","title":"Swift.ExpressibleByExtendedGraphemeClusterLiteral","identifier":"doc:\/\/Parsing\/s43ExpressibleByExtendedGraphemeClusterLiteralP"},"doc://Parsing/documentation/Parsing/Parser/ExpressibleByStringLiteral-Implementations":{"role":"collectionGroup","abstract":[],"title":"ExpressibleByStringLiteral Implementations","url":"\/documentation\/parsing\/parser\/expressiblebystringliteral-implementations","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/ExpressibleByStringLiteral-Implementations","type":"topic","kind":"article"},"doc://Parsing/documentation/Parsing/Parser/char(_:)":{"type":"topic","abstract":[],"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/char(_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"char","kind":"identifier"},{"kind":"text","text":"("},{"text":"Character","preciseIdentifier":"s:SJ","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Parser","preciseIdentifier":"s:7Parsing6ParserV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/parsing\/parser\/char(_:)","kind":"symbol","role":"symbol","title":"char(_:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Output","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}]}},"doc://Parsing/documentation/Parsing/Parser/prefix(while:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"prefix"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SJ","text":"Character"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parser","preciseIdentifier":"s:7Parsing6ParserV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"title":"prefix(while:)","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A "},{"code":"Parser","type":"codeVoice"},{"text":" that prefixes until predicate fails.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/parser\/prefix(while:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Output","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/prefix(while:)"},"doc://Parsing/s33ExpressibleByUnicodeScalarLiteralP":{"identifier":"doc:\/\/Parsing\/s33ExpressibleByUnicodeScalarLiteralP","type":"unresolvable","title":"Swift.ExpressibleByUnicodeScalarLiteral"},"doc://Parsing/documentation/Parsing/Parser/oneOf(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"oneOf"},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:7Parsing6ParserV","text":"Parser","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":">...) -> "},{"kind":"typeIdentifier","text":"Parser","preciseIdentifier":"s:7Parsing6ParserV"},{"kind":"text","text":"<"},{"text":"A","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"oneOf(_:)","role":"symbol","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/oneOf(_:)","url":"\/documentation\/parsing\/parser\/oneof(_:)","abstract":[{"text":"returns the first parser that succeeds","type":"text"}]},"doc://Parsing/documentation/Parsing/Parser/ExpressibleByUnicodeScalarLiteral-Implementations":{"type":"topic","kind":"article","title":"ExpressibleByUnicodeScalarLiteral Implementations","role":"collectionGroup","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/ExpressibleByUnicodeScalarLiteral-Implementations","url":"\/documentation\/parsing\/parser\/expressiblebyunicodescalarliteral-implementations","abstract":[]},"doc://Parsing/documentation/Parsing/Parser/char":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"char"},{"kind":"text","text":": "},{"text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SJ","text":"Character"},{"kind":"text","text":">"}],"title":"char","type":"topic","role":"symbol","abstract":[],"kind":"symbol","url":"\/documentation\/parsing\/parser\/char","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Output","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":".","type":"text"}]},"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/char"},"doc://Parsing/documentation/Parsing/Parser/always(_:)":{"type":"topic","title":"always(_:)","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/always(_:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"always","kind":"identifier"},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserV","text":"Parser"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"A parser that always "},{"type":"codeVoice","code":"succeeds"},{"type":"text","text":", useful when combined with "},{"type":"codeVoice","code":"flatMap(_:)"},{"text":".","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/parser\/always(_:)"},"doc://Parsing/s26ExpressibleByStringLiteralP":{"type":"unresolvable","identifier":"doc:\/\/Parsing\/s26ExpressibleByStringLiteralP","title":"Swift.ExpressibleByStringLiteral"},"doc://Parsing/documentation/Parsing/Parser/oneOrMoreSpaces":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"oneOrMoreSpaces","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserV","text":"Parser"},{"kind":"text","text":"<()>"}],"title":"oneOrMoreSpaces","type":"topic","role":"symbol","abstract":[],"kind":"symbol","url":"\/documentation\/parsing\/parser\/oneormorespaces","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Output","type":"codeVoice"},{"type":"text","text":" is "},{"code":"()","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/oneOrMoreSpaces"},"doc://Parsing/documentation/Parsing/Parser/zeroOrMore(separatedBy:)":{"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/zeroOrMore(separatedBy:)","url":"\/documentation\/parsing\/parser\/zeroormore(separatedby:)","title":"zeroOrMore(separatedBy:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"zeroOrMore"},{"kind":"text","text":"("},{"text":"separatedBy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Parser","preciseIdentifier":"s:7Parsing6ParserV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":">) -> ","kind":"text"},{"text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserV"},{"text":"<[","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"]>"}],"abstract":[],"role":"symbol"},"doc://Parsing/documentation/Parsing/Parser/run(_:)":{"type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"text":"(","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> (match"},{"text":": ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, rest","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss","text":"Substring"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/run(_:)","abstract":[{"type":"text","text":"Attempts to parse "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" from provided input string."}],"title":"run(_:)","url":"\/documentation\/parsing\/parser\/run(_:)"},"doc://Parsing/documentation/Parsing/Parser/map(_:)":{"title":"map(_:)","kind":"symbol","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/map(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing6ParserV","text":"Parser","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","url":"\/documentation\/parsing\/parser\/map(_:)","abstract":[]},"doc://Parsing/documentation/Parsing/Parser/prefix(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"prefix","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing6ParserV","text":"Parser","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Output","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"prefix(_:)","type":"topic","role":"symbol","abstract":[{"type":"text","text":"parses literal off beginning of string"}],"kind":"symbol","url":"\/documentation\/parsing\/parser\/prefix(_:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Output","type":"codeVoice"},{"type":"text","text":" is "},{"code":"()","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/prefix(_:)"}}}