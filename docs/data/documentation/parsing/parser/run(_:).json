{"metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"keyword","text":"consuming"},{"text":" ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> (match","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, rest"},{"text":": ","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"text":")","kind":"text"}],"role":"symbol","title":"run(_:)","modules":[{"name":"Parsing"}],"roleHeading":"Instance Method","externalID":"s:7Parsing6ParserV3runyxSg5match_Ss4resttSSnF"},"kind":"symbol","abstract":[{"type":"text","text":"Attempts to parse "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" from provided input string."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"str","kind":"internalParam"},{"kind":"text","text":": "},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":") -> (match","kind":"text"},{"text":": ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, rest","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Substring","preciseIdentifier":"s:Ss"},{"text":")","kind":"text"}],"languages":["swift"]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"the string to parse."}],"type":"paragraph"}],"name":"str"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"a tuple of match and remainder of the string.","type":"text"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"inlineContent":[{"type":"text","text":"Will consume the matching portion of the input or return a "},{"type":"codeVoice","code":"nil"},{"text":" match.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"rest"},{"type":"text","text":" is the portion of the input not matched."}],"type":"paragraph"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/run(_:)"},"hierarchy":{"paths":[["doc:\/\/Parsing\/documentation\/Parsing","doc:\/\/Parsing\/documentation\/Parsing\/Parser"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parser\/run(_:)"]}],"references":{"doc://Parsing/documentation/Parsing":{"kind":"symbol","abstract":[],"url":"\/documentation\/parsing","title":"Parsing","type":"topic","role":"collection","identifier":"doc:\/\/Parsing\/documentation\/Parsing"},"doc://Parsing/documentation/Parsing/Parser/run(_:)":{"type":"topic","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"text":"(","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> (match"},{"text":": ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, rest","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss","text":"Substring"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/run(_:)","abstract":[{"type":"text","text":"Attempts to parse "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" from provided input string."}],"title":"run(_:)","url":"\/documentation\/parsing\/parser\/run(_:)"},"doc://Parsing/documentation/Parsing/Parser":{"abstract":[{"type":"text","text":"A generic type for building parsers of ("},{"type":"codeVoice","code":"String"},{"text":") -> ","type":"text"},{"type":"codeVoice","code":"Output"}],"type":"topic","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser","title":"Parser","url":"\/documentation\/parsing\/parser","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"kind":"symbol","role":"symbol"}}}