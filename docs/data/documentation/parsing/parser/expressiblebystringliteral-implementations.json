{"identifier":{"url":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/ExpressibleByStringLiteral-Implementations","interfaceLanguage":"swift"},"kind":"article","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"ExpressibleByStringLiteral Implementations","modules":[{"name":"Parsing"}],"role":"collectionGroup"},"hierarchy":{"paths":[["doc:\/\/Parsing\/documentation\/Parsing","doc:\/\/Parsing\/documentation\/Parsing\/Parser"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parser\/expressiblebystringliteral-implementations"]}],"topicSections":[{"generated":true,"title":"Initializers","identifiers":["doc:\/\/Parsing\/documentation\/Parsing\/Parser\/init(stringLiteral:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/Parsing\/documentation\/Parsing\/Parser\/StringLiteralType"],"generated":true}],"references":{"doc://Parsing/documentation/Parsing/Parser/StringLiteralType":{"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/StringLiteralType","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"StringLiteralType"}],"title":"Parser.StringLiteralType","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"StringLiteralType","kind":"identifier"}],"type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Output"},{"type":"text","text":" is "},{"code":"()","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/parsing\/parser\/stringliteraltype","role":"symbol"},"doc://Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","url":"\/documentation\/parsing","abstract":[],"identifier":"doc:\/\/Parsing\/documentation\/Parsing","type":"topic","kind":"symbol"},"doc://Parsing/documentation/Parsing/Parser/init(stringLiteral:)":{"abstract":[],"identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser\/init(stringLiteral:)","url":"\/documentation\/parsing\/parser\/init(stringliteral:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"stringLiteral"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","role":"symbol","title":"init(stringLiteral:)"},"doc://Parsing/documentation/Parsing/Parser":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","kind":"symbol","url":"\/documentation\/parsing\/parser","role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"A generic type for building parsers of ("},{"code":"String","type":"codeVoice"},{"text":") -> ","type":"text"},{"code":"Output","type":"codeVoice"}]}}}