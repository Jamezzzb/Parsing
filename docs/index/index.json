{"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/init(run:)","title":"init(run: (inout Substring) -> Output?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/run","title":"let run: (inout Substring) -> Output?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/flatmap(_:)","title":"func flatMap<B>((Output) -> Parser<B>) -> Parser<B>","type":"method"},{"path":"\/documentation\/parsing\/parser\/map(_:)","title":"func map<B>((Output) -> B) -> Parser<B>","type":"method"},{"path":"\/documentation\/parsing\/parser\/run(_:)","title":"func run(consuming String) -> (match: Output?, rest: Substring)","type":"method"},{"path":"\/documentation\/parsing\/parser\/zeroormore(separatedby:)","title":"func zeroOrMore(separatedBy: Parser<Void>) -> Parser<[Output]>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/char","title":"static let char: Parser<Character>","type":"property"},{"path":"\/documentation\/parsing\/parser\/never","title":"static var never: Parser<Output>","type":"property"},{"path":"\/documentation\/parsing\/parser\/oneormorespaces","title":"static let oneOrMoreSpaces: Parser<()>","type":"property"},{"path":"\/documentation\/parsing\/parser\/zeroormorespaces","title":"static let zeroOrMoreSpaces: Parser<()>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/always(_:)","title":"static func always<A>(A) -> Parser<A>","type":"method"},{"path":"\/documentation\/parsing\/parser\/char(_:)","title":"static func char(Character) -> Parser<Output>","type":"method"},{"path":"\/documentation\/parsing\/parser\/matchingallcharacters(notin:)","title":"static func matchingAllCharacters(notIn: Set<Character>) -> Parser<Output>","type":"method"},{"path":"\/documentation\/parsing\/parser\/oneof(_:)","title":"static func oneOf<A>(Parser<A>...) -> Parser<A>","type":"method"},{"path":"\/documentation\/parsing\/parser\/prefix(_:)","title":"static func prefix(String) -> Parser<Output>","type":"method"},{"path":"\/documentation\/parsing\/parser\/prefix(while:)","title":"static func prefix(while: (Character) -> Bool) -> Parser<Output>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/extendedgraphemeclusterliteraltype","title":"Parser.ExtendedGraphemeClusterLiteralType","type":"typealias"}],"path":"\/documentation\/parsing\/parser\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/stringliteraltype","title":"Parser.StringLiteralType","type":"typealias"}],"path":"\/documentation\/parsing\/parser\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/parsing\/parser\/unicodescalarliteraltype","title":"Parser.UnicodeScalarLiteralType","type":"typealias"}],"path":"\/documentation\/parsing\/parser\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/parsing\/parser","title":"Parser","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/parsing\/zip(_:)","title":"func zip<each A>(repeat Parser<each A>) -> Parser<(repeat each A)>","type":"func"}],"path":"\/documentation\/parsing","title":"Parsing","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}